# to make sure the nodes are created in order, we
# have to force a --no-parallel execution.
ENV['VAGRANT_NO_PARALLEL'] = 'yes'

# enable typed triggers.
# NB this is needed to modify the vSphere VMs.
ENV['VAGRANT_EXPERIMENTAL'] = 'typed_triggers'

CONFIG_TRUENAS_IP_ADDRESS           = '10.10.0.2'
CONFIG_PIXIE_IP_ADDRESS             = '10.10.0.3'
CONFIG_UBUNTU_IP_ADDRESS            = '10.10.0.10'
CONFIG_K3S_IP_ADDRESS               = '10.10.0.11'
CONFIG_WINDOWS_IP_ADDRESS           = '10.10.0.12'
CONFIG_DEBIAN_LIVE_BOOT_IP_ADDRESS  = '10.10.0.20'
CONFIG_DEBIAN_LIVE_BOOT_MAC_ADDRESS = '08:00:27:00:00:20'
CONFIG_UBUNTU_BOOT_IP_ADDRESS       = '10.10.0.21'
CONFIG_UBUNTU_BOOT_MAC_ADDRESS      = '08:00:27:00:00:21'
CONFIG_OPENSUSE_BOOT_IP_ADDRESS     = '10.10.0.22'
CONFIG_OPENSUSE_BOOT_MAC_ADDRESS    = '08:00:27:00:00:22'
CONFIG_WINDOWS_BOOT_IP_ADDRESS      = '10.10.0.23'
CONFIG_WINDOWS_BOOT_MAC_ADDRESS     = '08:00:27:00:00:23'

CONFIG_STORAGE_DISKS        = ['sdb', 'sdc', 'sdd']
CONFIG_STORAGE_DISK_SIZE_GB = 64
CONFIG_STORAGE_MTU          = 9000

require 'open3'

Vagrant.configure(2) do |config|
  config.vm.synced_folder '.', '/vagrant', disabled: true

  config.vm.provider 'libvirt' do |lv, config|
    lv.default_prefix = "#{File.basename(File.dirname(File.dirname(__FILE__)))}_"
    lv.cpu_mode = 'host-passthrough'
    lv.nested = true # nested virtualization.
    lv.keymap = 'pt'
    lv.disk_bus = 'scsi'
    lv.disk_device = 'sda'
    lv.disk_driver :discard => 'unmap', :cache => 'unsafe'
  end

  config.vm.provider 'vsphere' do |vsphere, config|
    vsphere.notes = "Created from #{__FILE__}"
    vsphere.user = ENV['GOVC_USERNAME']
    vsphere.password = ENV['GOVC_PASSWORD']
    vsphere.insecure = true
    vsphere.host = ENV['GOVC_HOST']
    vsphere.data_center_name = ENV['GOVC_DATACENTER']
    vsphere.compute_resource_name = ENV['GOVC_CLUSTER']
    vsphere.data_store_name = ENV['GOVC_DATASTORE']
    vsphere.vm_base_path = ENV['VSPHERE_VM_FOLDER']
    vsphere.vlan = ENV['VSPHERE_VLAN']
    config.trigger.after :'VagrantPlugins::VSphere::Action::Clone', type: :action do |trigger|
      trigger.ruby do |env, machine|
        # configure the network.
        # see https://github.com/hashicorp/vagrant/blob/v2.2.10/lib/vagrant/machine.rb#L13
        # see https://github.com/hashicorp/vagrant/blob/v2.2.10/plugins/kernel_v2/config/vm.rb#L716
        interfaces = machine.config.vm.networks.select{|type, options| type == :private_network && options.key?(:ip)}.map do |type, options|
          options[:ip]
        end
        stdout, stderr, status = Open3.capture3(
          'bash',
          'provision-vsphere-network.sh',
          machine.id,
          interfaces.to_json)
        if status.exitstatus != 0
          raise "failed to configure the network. status=#{status.exitstatus} stdout=#{stdout} stderr=#{stderr}"
        end
      end
    end
  end

  config.vm.define :truenas do |config|
    config.vm.box = 'truenas-scale-22.12-amd64'
    # config.vm.box = 'truenas-scale-22.12-uefi-amd64'
    config.vm.provider 'libvirt' do |lv, config|
      lv.memory = 8*1024
      lv.cpus = 2
      # add the storage disks.
      CONFIG_STORAGE_DISKS.each do |disk_name|
        lv.storage :file, :size => "#{CONFIG_STORAGE_DISK_SIZE_GB}G", :bus => 'scsi', :discard => 'unmap', :cache => 'unsafe'
      end
      config.vm.synced_folder '.', '/vagrant', type: 'nfs', nfs_version: '4.2', nfs_udp: false
      config.trigger.before :up do |trigger|
        trigger.run = {
          inline: <<~EOF
          sh -euc '
          copy() {
            if [ -e $1 ]; then
              install -d $2
              rsync $1 $2
            fi
          }
          copy ~/.vagrant.d/boxes/ubuntu-22.04-amd64/0.0.0/libvirt/box.img tmp/ubuntu-vagrant/
          copy ../../debian-live-builder-vagrant/live-image-amd64.hybrid.iso tmp/debian-live-builder-vagrant/
          copy ../../windows-pe-vagrant/tmp/winpe-amd64.iso tmp/windows-pe-vagrant/
          '
          EOF
        }
      end
    end
    config.vm.provider 'vsphere' do |vsphere, config|
      vsphere.memory_mb = 8*1024
      vsphere.cpu_count = 2
      vsphere.name = ENV['VSPHERE_VM_NAME']
      vsphere.template_name = ENV['VSPHERE_TEMPLATE_NAME']
      config.trigger.after :'VagrantPlugins::VSphere::Action::Clone', type: :action do |trigger|
        trigger.ruby do |env, machine|
          # add the storage disks.
          CONFIG_STORAGE_DISKS.each do |disk_name|
            stdout, stderr, status = Open3.capture3(
              'bash',
              'provision-vsphere-disk.sh',
              machine.id,
              disk_name,
              "#{CONFIG_STORAGE_DISK_SIZE_GB}")
            if status.exitstatus != 0
              raise "failed to configure the disk. status=#{status.exitstatus} stdout=#{stdout} stderr=#{stderr}"
            end
          end
        end
      end
    end
    config.vm.network :private_network, ip: CONFIG_TRUENAS_IP_ADDRESS, auto_config: false, libvirt__mtu: CONFIG_STORAGE_MTU, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false
    config.vm.provision 'shell', path: 'provision-truenas.sh', args: [CONFIG_TRUENAS_IP_ADDRESS, CONFIG_STORAGE_MTU]
  end

  config.vm.define :pixie do |config|
    config.vm.hostname = 'pixie'
    config.vm.box = 'ubuntu-22.04-amd64'
    # config.vm.box = 'ubuntu-22.04-uefi-amd64'
    config.vm.provider 'libvirt' do |lv, config|
      lv.memory = 1*1024
      lv.cpus = 2
      config.vm.synced_folder '.', '/vagrant', type: 'nfs', nfs_version: '4.2', nfs_udp: false
    end
    config.vm.provider 'vsphere' do |vsphere, config|
      vsphere.memory_mb = 1*1024
      vsphere.cpu_count = 2
      vsphere.name = ENV['VSPHERE_PIXIE_VM_NAME']
      vsphere.template_name = ENV['VSPHERE_UBUNTU_TEMPLATE_NAME']
    end
    config.vm.network :private_network, ip: CONFIG_PIXIE_IP_ADDRESS, libvirt__mtu: CONFIG_STORAGE_MTU, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false
    config.vm.provision 'shell', path: 'provision-common.sh', args: [CONFIG_PIXIE_IP_ADDRESS, CONFIG_STORAGE_MTU]
    config.vm.provision 'shell', path: 'provision-pixie.sh', args: [CONFIG_PIXIE_IP_ADDRESS, CONFIG_TRUENAS_IP_ADDRESS, CONFIG_STORAGE_MTU]
  end

  config.vm.define :debian_live_boot do |config|
    config.vm.box = nil
    config.vm.provider 'libvirt' do |lv, config|
      lv.memory = 2*1024
      lv.cpus = 2
      lv.machine_type = 'q35'
      lv.random :model => 'random'
      lv.graphics_type = 'spice'
      lv.video_type = 'qxl'
      lv.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
      lv.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'
      lv.boot 'network'
    end
    config.vm.network :private_network, mac: CONFIG_DEBIAN_LIVE_BOOT_MAC_ADDRESS, ip: CONFIG_DEBIAN_LIVE_BOOT_IP_ADDRESS, libvirt__mtu: CONFIG_STORAGE_MTU, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false
  end

  config.vm.define :ubuntu_boot do |config|
    config.vm.box = nil
    config.vm.provider 'libvirt' do |lv, config|
      lv.memory = 2*1024
      lv.cpus = 2
      lv.machine_type = 'q35'
      lv.random :model => 'random'
      lv.graphics_type = 'spice'
      lv.video_type = 'qxl'
      lv.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
      lv.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'
      lv.boot 'network'
    end
    config.vm.network :private_network, mac: CONFIG_UBUNTU_BOOT_MAC_ADDRESS, ip: CONFIG_UBUNTU_BOOT_IP_ADDRESS, libvirt__mtu: CONFIG_STORAGE_MTU, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false
  end

  config.vm.define :opensuse_boot do |config|
    config.vm.box = nil
    config.vm.provider 'libvirt' do |lv, config|
      lv.memory = 2*1024
      lv.cpus = 2
      lv.machine_type = 'q35'
      lv.random :model => 'random'
      lv.graphics_type = 'spice'
      lv.video_type = 'qxl'
      lv.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
      lv.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'
      lv.storage :file, :device => :cdrom, :bus => 'scsi', :path => "#{File.dirname(__FILE__)}/openSUSE-Leap-15.4-NET-x86_64-Media.iso"
    end
    config.vm.network :private_network, mac: CONFIG_OPENSUSE_BOOT_MAC_ADDRESS, ip: CONFIG_OPENSUSE_BOOT_IP_ADDRESS, libvirt__mtu: CONFIG_STORAGE_MTU, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false
  end

  config.vm.define :windows_boot do |config|
    config.vm.box = nil
    config.vm.provider 'libvirt' do |lv, config|
      lv.memory = 2*1024
      lv.cpus = 2
      lv.machine_type = 'q35'
      lv.random :model => 'random'
      lv.graphics_type = 'spice'
      lv.video_type = 'qxl'
      lv.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
      lv.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'
      lv.boot 'network'
    end
    config.vm.network :private_network, mac: CONFIG_WINDOWS_BOOT_MAC_ADDRESS, ip: CONFIG_WINDOWS_BOOT_IP_ADDRESS, libvirt__mtu: CONFIG_STORAGE_MTU, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false
  end

  config.vm.define :ubuntu do |config|
    config.vm.hostname = 'ubuntu'
    config.vm.box = 'ubuntu-22.04-amd64'
    # config.vm.box = 'ubuntu-22.04-uefi-amd64'
    config.vm.provider 'libvirt' do |lv, config|
      lv.memory = 2*1024
      lv.cpus = 2
    end
    config.vm.provider 'vsphere' do |vsphere, config|
      vsphere.memory_mb = 2*1024
      vsphere.cpu_count = 2
      vsphere.name = ENV['VSPHERE_UBUNTU_VM_NAME']
      vsphere.template_name = ENV['VSPHERE_UBUNTU_TEMPLATE_NAME']
    end
    config.vm.network :private_network, ip: CONFIG_UBUNTU_IP_ADDRESS, libvirt__mtu: CONFIG_STORAGE_MTU, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false
    config.vm.provision 'shell', path: 'provision-common.sh', args: [CONFIG_UBUNTU_IP_ADDRESS, CONFIG_STORAGE_MTU]
    config.vm.provision 'shell', path: 'provision-ubuntu.sh', args: [CONFIG_TRUENAS_IP_ADDRESS]
  end

  config.vm.define :k3s do |config|
    config.vm.hostname = 'k3s'
    config.vm.box = 'ubuntu-22.04-amd64'
    # config.vm.box = 'ubuntu-22.04-uefi-amd64'
    config.vm.provider 'libvirt' do |lv, config|
      lv.memory = 6*1024
      lv.cpus = 2
    end
    config.vm.provider 'vsphere' do |vsphere, config|
      vsphere.memory_mb = 6*1024
      vsphere.cpu_count = 2
      vsphere.name = ENV['VSPHERE_K3S_VM_NAME']
      vsphere.template_name = ENV['VSPHERE_UBUNTU_TEMPLATE_NAME']
    end
    config.vm.network :private_network, ip: CONFIG_K3S_IP_ADDRESS, libvirt__mtu: CONFIG_STORAGE_MTU, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false
    config.vm.provision 'shell', path: 'provision-common.sh', args: [CONFIG_K3S_IP_ADDRESS, CONFIG_STORAGE_MTU]
    config.vm.provision 'shell', path: 'provision-k3s.sh', args: [CONFIG_K3S_IP_ADDRESS, CONFIG_TRUENAS_IP_ADDRESS]
  end

  config.vm.define :windows do |config|
    config.vm.hostname = 'windows'
    config.vm.box = 'windows-2022-amd64'
    # config.vm.box = 'windows-2022-uefi-amd64'
    config.vm.provider 'libvirt' do |lv, config|
      lv.memory = 2*1024
      lv.cpus = 2
    end
    config.vm.provider 'vsphere' do |vsphere, config|
      vsphere.memory_mb = 2*1024
      vsphere.cpu_count = 2
      vsphere.name = ENV['VSPHERE_WINDOWS_VM_NAME']
      vsphere.template_name = ENV['VSPHERE_WINDOWS_TEMPLATE_NAME']
    end
    config.vm.network :private_network, ip: CONFIG_WINDOWS_IP_ADDRESS, libvirt__mtu: CONFIG_STORAGE_MTU, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false
    config.vm.provision 'shell', path: 'provision-windows.ps1', args: [CONFIG_WINDOWS_IP_ADDRESS, CONFIG_TRUENAS_IP_ADDRESS, CONFIG_STORAGE_MTU]
  end
end
